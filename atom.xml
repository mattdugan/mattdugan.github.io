<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matt Dugan]]></title>
  <link href="http://mattdugan.github.io/atom.xml" rel="self"/>
  <link href="http://mattdugan.github.io/"/>
  <updated>2013-07-15T08:47:56-04:00</updated>
  <id>http://mattdugan.github.io/</id>
  <author>
    <name><![CDATA[Matt Dugan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Red Hat Summit 2013: Cloud Bursting with OpenShift]]></title>
    <link href="http://mattdugan.github.io/blog/2013/07/11/red-hat-summit-2013-cloud-bursting-with-openshift/"/>
    <updated>2013-07-11T16:57:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/07/11/red-hat-summit-2013-cloud-bursting-with-openshift</id>
    <content type="html"><![CDATA[<p>It&rsquo;s 8PM, do you know where your true geeks are?  Well, the room was packed
for the Cloud Bursting with OpenShift birds of a feather session so the Red
Hat Summit 2013 in Boston might not be a bad guess.</p>

<p><a href="https://www.runcloudrun.com/">Grant Shipley</a> leads the session by
<em>skipping</em> the &ldquo;Intro to OpenShift&rdquo; because 18 out of 20 people in the room
are already diving in.  Awesome.  Grant runs his <em>blog</em> on
<a href="http://www.openshift.com">OpenShift</a> making it one of the few that can
elastically scale in response to load.</p>

<h2>OpenShift</h2>

<p>OpenShift is an ideal platform for deploying and hosting web applications
because of its architecture.
Supporting high deployment density is second nature and the ability to
scale out (or in) <em>automatically</em> is just gravy.  When Grant&rsquo;s blog isn&rsquo;t
taking any traffic, his OpenShift platform consumption is effectively
zero.  But, under load, he could have hundreds of instances of the blog app
pumped up on the OpenShift hosting servers, without having to touch
anything or even worry about it.</p>

<p>The public OpenShift actually runs on
Amazon EC2, which was an intentional decision on the part of Red Hat at
design and development time.  They wanted to create a platform which was
inherently cloud scalable and deployable on local, hosted, and third party
architecture.  Since OpenShift first went into public beta 2 years ago (at
Red Hat Summit <em>2011</em>) there have been over a million applications created
on the platform.  Now, Openshift is available for paid, enterprise services
as well as self-hosted deployment.</p>

<p>For a demo, Grant showed the HA Proxy status page while performing a
web-base load test on his OpenShift application.  You could see as the
utilization reached a certain threshold that new instances were
automatically provisioned and taking traffic.  A minute after the requests
stopped coming in, or started coming in more slowly, extra instances were
de-provisioned.  This use case is great for applications which peak and
fall in terms of demand over time.  Even when the time scales are measured
in terms of minutes, the OpenShift architecture helps you ensure that your servers
are giving you their best, but only when necessary.</p>

<h2>Pricing</h2>

<p>Hosting production applications on OpenShift is as easy as developing on
OpenShift, but there is some cost involved.  However, the pricing model
starts off very low because the architecture is capable of high vertical
density.  To run an application using 3 <em>Gears</em> 24x7 (or 2,280 hours a
month) is free.  What&rsquo;s a Gear?  A SQL database is a Gear, an application
is a Gear, and any intermediary kind of platform is also a Gear.
Considering common 3-tier architecture, you could say &ldquo;your first app is
free, but the next one might cost you&rdquo;.  What a great excuse to get started.</p>

<h2>Uses</h2>

<p>As was publicly announced at the Red Hat Summit, Accenture is standardizing
web deployment on OpenShift.  However, Accenture isn&rsquo;t the first.  Already
Web PaaS providers are popping up, such as GetUp Cloud in Brazil.  I&rsquo;m sure
I&rsquo;ll be entering the fray quite soon myself with
<a href="http://www.shadow-soft.com">Shadow-Soft</a>.</p>

<h2>Architecture</h2>

<p>Not all containers are created equal.  OpenShift does advertise a container
architecture, but it is important to note that &ldquo;container&rdquo;, in this case,
is not a proper noun.  It does not refer to &ldquo;Linux Containers&rdquo;.  Instead,
it is a classical (and clever) configuration of CPU Groups, SE Linux
policies, and permissions which come together to provide <em>containment</em> to
individual user and application tenants on the OpenShift hosting platform.
When you install OpenShift yourself, you can use these techniques to say
&ldquo;user &lsquo;x&rsquo; has a minimum of 30% memory and CPU before scaling starts&rdquo; and
other such logical scaling boundaries.</p>

<h2>Community</h2>

<p>OpenShift is <em>very</em> active right now, primarily on IRC via the
<code>#OPENSHIFT_DEV</code> channel on FreeNode.  Generally, members of the
development team are always online somewhere in the world and a
conversation is flowing between users and developers.  Try getting that
with commercial proprietary software. :&ndash;)</p>

<h2>Closing Thoughts</h2>

<p>OpenShift is the most exciting thing Red Hat has going right now, in my
opinion.  I am eager to work with it on premise.  The advantages it
gives in deployment scalability for web applications (or, can you say, Web
<em>APIs</em>?) is a blast from the past of hand tuned high performance web
hosting services with all the benefits of modern application and user
separatation and on-demand (on HTTP request) elastic scaling.</p>

<p>Also, the <em>My app runs on OpenShift</em> track jacket I picked up for deploying
on OpenShift live while at the Summit is sweeeeeeeeeeeeeeeet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Red Hat Summit 2013: The JBoss Way]]></title>
    <link href="http://mattdugan.github.io/blog/2013/07/11/red-hat-summit-2013-the-jboss-way/"/>
    <updated>2013-07-11T16:05:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/07/11/red-hat-summit-2013-the-jboss-way</id>
    <content type="html"><![CDATA[<p>Pete Muir was the presenter again, tailing off from his prior session on
<em>Building HTML5 Applications</em>.  This session should have some code examples
and more insights.</p>

<p>Diving into the code for the quickstarts, Pete makes a plug for
<a href="http://www.angularjs.org/">AngularJS</a> and is clearly a big fan.  The
<em>difference</em> with Angular JS is that it feels like using a tag library
language rather than applying text base templates for substitution.  The
negative point is that since AngularJS does not use <code>data-</code> attribute
prefixes, each <code>ng-</code> attribute gets the red underline because it isn&rsquo;t
following the HTML5 doctype.  Shame.</p>

<p>Still, being able to see the same or similar quick starts represented with
variations on the implementation choices is the next best thing to diving
into a framework and trying to make something useful yourself.</p>

<p>The <a href="https://www.jboss.org/jdf/quickstarts/get-started/">Quickstarts</a>
source code is always available on <a href="https://github.com/jboss-jdf/%0Ajboss-as-quickstart">GitHub</a> and the individual pages for the quick start guides
have comments enabled which the authors tend to respond to.  This
communication is key since there are nearly 100 quick starts right now to
absorb and make sense of.</p>

<p>Code examples are presented using <a href="https://devstudio.jboss.com/download/6.x.html">JBoss Developer Studio</a>, the enterprise version of the
JBoss IDE.  The examples are executing on <a href="http://www.redhat.com/products/jbossenterprisemiddleware/application-platform/">JBoss EAP 6</a>, the
enterprise version of Wildfly (JBoss Application Server &ndash; Community Edition).</p>

<p>The workflow of making code changes or developing a project that you want
to deploy to your configured server from within the developer studio is
simple: just drag and drop the application module onto the server
configuration and it will deploy in the console.</p>

<h2>JBoss Forge</h2>

<p>Now the fun starts.  <a href="http://forge.jboss.org/">JBoss Forge</a> is a command
line CLI which <em>interprets</em> commands to cause code to be generated in the
project.  As I said before, this rapid prototyping feature from other
dynamic language platforms is finally making its way into Java
development.  Using TAB completion, Pete is able to quickly generate
additional entity classes in the example project and wire them up with CDI.</p>

<p>What immediately comes to mind is using Forge with a template script that
accepts some parameters (or YAML) markup to substitute into the Forge
script.  This could be a powerful way to quickstart applications of a
particular character while leaving the important decisions up to the
developer, while still ensuring that the generated application code matches
up to local policies and code structure guidelines.</p>

<p>Finally, using the JBoss Developer Studio, Pete <em>publishes</em> his application
directly to his <a href="http://www.openshift.com">OpenShift</a> instance, showing how a
developer can create and deploy an application onto the &ldquo;cloud&rdquo; that is
more than just a simple static website, but a real JEE client server
application.  What a use case!</p>

<h2>Closing Thoughts</h2>

<p>The JDF roadmap for 2013 should add quickstarts for JBoss Fuse, Switch
Yard, JBPM and Drools.  Exciting times are ahead.  I wonder if having all
this quickstart collateral will cause the JBoss development team to slow
down the rate of change in the platform?  Naaah. :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JUDCon 2013: Resilient Enterprise Messaging with Fuse &amp; Red Hat Enterprise Linux]]></title>
    <link href="http://mattdugan.github.io/blog/2013/07/11/judcon-2013-resilient-enterprise-messaging-with-fuse-and-red-hat-enterprise-linux/"/>
    <updated>2013-07-11T14:12:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/07/11/judcon-2013-resilient-enterprise-messaging-with-fuse-and-red-hat-enterprise-linux</id>
    <content type="html"><![CDATA[<p>This was the last session I attended prior to the start of the Summit
keynotes.  Presented by the Scotts (Cranton and McCarty), the session
turned out to be the very-high-level companion to Hiram&rsquo;s &lsquo;Making Apache
Active MQ Scale&rsquo; session.  Unfortunately, this session wasn&rsquo;t nearly as
deep as it could have been.</p>

<p>Presented from a laptop <em>covered</em> in stickers (but at least it was running
RHEL!), the session focused on the high level feature capabilities of
<a href="https://www.jboss.org/products/fuse">JBoss FUSE</a> and A-MQ.</p>

<p><a href="https://www.jboss.org/jbossamq">JBoss A-MQ</a> is the enterprise certified
and supported release of Apache Active MQ, with multiple protocol and
language support.  FUSE embeds Active MQ into Karaf using <a href="http://fusesource.com/products/fuse-fabric/">FUSE Fabric</a>.</p>

<p>Some of the added features or benefits are:</p>

<ul>
<li>The ability to use one backing store per broker, but with separation to
avoid blocking at the I/O controller</li>
<li>An operations managed cluster instead of product level clustering using
the Red Hat Cluster Suite</li>
<li>N+1 or N+2 architecture for highly available message brokers instead of
2N or more (like active/passive) configurations.</li>
</ul>


<p>The good news is that since everything is open source, we can dig into the
<a href="http://github.com/jboss-fuse">code</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JUDCon 2013: So you want to be a JBoss Rock Star]]></title>
    <link href="http://mattdugan.github.io/blog/2013/06/25/judcon-2013-so-you-want-to-be-a-jboss-rock-star/"/>
    <updated>2013-06-25T16:23:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/06/25/judcon-2013-so-you-want-to-be-a-jboss-rock-star</id>
    <content type="html"><![CDATA[<p>Eric Schabell gave an emphatic <em>rah rah</em> presentation to encourage everyone
in attendance (not as many as you might think) to become actively involved
in speaking roles about technology, developer process, or really anything
they are passionate about.  This sounds kind of ho-hum and obvious, but it
is true advice for taking a career to the next step by becoming known for
<em>who</em> you are as well as well as <em>what</em> you do.  This notion was an
important one in my decision to make a career change and come work for
<a href="http://www.shadow-soft.com">Shadow Soft</a>.</p>

<h2>Knowledge, Passion and Tools</h2>

<p>The three tenants to your growth process are knowledge about what you
do (or what you want to be known for doing), the passion to do it and do
it well, and the tools you need in order to be successful in communicating
it to the world (or your desired audience, but why aim low?)</p>

<p>To exercise your personal growth, Eric recommends a simple three step plan:</p>

<ol>
<li>Choose your story you want to tell, or the project you want to be known
through.</li>
<li>Practice uniformity (more on this later)</li>
<li>Integrate it with <em>the Cloud</em>, or, differently phrased, make your
work discoverable and consumable by others via an established (and
popular) mechanism.</li>
</ol>


<p>If you are a developer or want to show things in the technology space,
practice making the <em>evidence</em> of your work public, mobile ready and
available through a common asset that your audience will have at their
disposal.  Generally, this can be summarized as &ldquo;Put it on the web.&rdquo;</p>

<p>Choosing your story or project is the first step because, as those of us
who have or work with children often offer as advice, it isn&rsquo;t enough to
want to be &ldquo;rich&rdquo; or &ldquo;famous&rdquo; or &ldquo;popular&rdquo;.  You have to answer the question
of <em>what</em> it is that made you rich or famous or popular.  Remember, people
can be well known for their spectacular failures just as well as they
can be known for spectacular success.  However, no one is known for
simply not trying.</p>

<p>Uniformity, particularly in the software space, can be applied to mean
the mode in which your software or concepts are downloaded, consumed and
how they interact with the participant.  Eric offers up his own template
for doing so on GitHub, via the <a href="https://www.github.com/eschabell/jboss-rock-star-template">JBoss Rock Star Template</a>.</p>

<p>It is important that you create a template for your own projects as well,
but stick to providing short and simple instructions for consuming it.  If
space is not prohibitive, include <em>everything</em> someone needs to get going
all in the same place.  Consider:</p>

<ul>
<li>How will the participant retrieve my project?</li>
<li>How will they install it?</li>
<li>How will they run it?</li>
<li>How long do they want to spend on it?</li>
<li>Where can they look for help?</li>
<li>What is the perception I want them to have?</li>
</ul>


<p>Answering these questions might lead you to select a uniform installation
script, a public hosting provider like GitHub for your open source projects,
a cloud hosting provider like <a href="http://www.openshift.com">OpenShift</a>, a
initialization script and corresponding local/remote deployment script, and
a README file in the root of your project.</p>

<h2>Closing Thoughts</h2>

<p>If this all seems so simple, we have only to ask &ldquo;Am I doing it yet?&rdquo;  If not,
why not, and is that a good reason.  I want to move forward.  Not everyone
does (which can be a good thing).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JUDCon 2013: Building HTML5 Applications]]></title>
    <link href="http://mattdugan.github.io/blog/2013/06/25/judcon-2013-building-html5-applications/"/>
    <updated>2013-06-25T15:20:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/06/25/judcon-2013-building-html5-applications</id>
    <content type="html"><![CDATA[<p><a href="http://www.jboss.org">JBoss</a> has been doing a lot of work (and a lot of
writing) about their quick starts to application development on the JBoss
stack.  This is a <em>good thing</em> as..</p>

<ol>
<li>All the code is open source</li>
<li>JBoss has a huge number of projects and it can be difficult to make
sense of them all without good examples.</li>
</ol>


<p>Pete Muir (who could walk into any high school undetected) is
a superb presenter and is an active participant in the JBoss quickstart
projects.</p>

<p>There are nearly 100 <a href="https://www.jboss.org/jdf/quickstarts/get-started/">JBoss Quickstarts</a>
to assist developers and architects alike with doing their own work or just
getting familiar with the suite of JBoss projects available for use.  Most, if
not all, are available from GitHub and can be initalized using a maven
command or two.  Some quickstart projects are implemented more than once, with
variation between the implementation technology.  This is another great
technique for learning just what difference does using
<a href="http://angularjs.org/">Angular JS</a> vs <a href="https://www.jboss.org/errai">JBoss Errai</a>
or <a href="https://www.jboss.org/richfaces">RichFaces JSF</a> make for an application
(for example).</p>

<h2>TicketMonster</h2>

<p>The focus of today&rsquo;s presentation (and others to follow) was the
<a href="https://www.jboss.org/jdf/examples/ticket-monster/tutorial/WhatIsTicketMonster/">Ticket Monster</a>
example application.  It made use of several technologies, including the
new JEE-6 specification for CDI to inject implementations of common application
functionality into the business classes, <a href="https://www.redhat.com/products/jbossenterprisemiddleware/data-grid/">JBoss DataGrid</a>
as an application object cache and a choice of view layers.  The application
is written in such a way as to have a different UI for both desktop and
mobile view clients while maintaining a consistent service API on the JBoss
application server.</p>

<p>As a shortcut for developing management UI capability for the various domain
objects in Ticket Monster, <a href="http://forge.jboss.org/">JBoss Forge</a> was used
to generate the administration pages as scaffolds on top of the entity objects
for the Admin function.  This is a feature that has been around in Ruby and
Python domains for quite some time, and it is very good to see the scaffold
development utility appear in the Java space.</p>

<p><a href="https://www.jboss.org/errai">JBoss Errai</a> is used to provide a live data
binding between the UI and the server side of the application, which, via
Errai, automatically upgrades the connection to a WebSockets interleaved
stream when supported by both the browser and server.  Using CDI and events,
the communication between the client and server is highly interactive.</p>

<h2>Closing Thoughts</h2>

<p>It is a point of personal satisfaction to see so much work being done to
help developers learn and do creative work, especially so since all of
the materials produced for the tutorials (and the application server itself)
is open source and available to all.  Kudos to the JBoss team and RedHat for
not looking for a &ldquo;line&rdquo; between what is open and what is closed, but for
being all open, all the time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JUDCon 2013: Full Control &amp; Transparency]]></title>
    <link href="http://mattdugan.github.io/blog/2013/06/25/judcon-2013-full-control-and-transparency/"/>
    <updated>2013-06-25T12:09:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/06/25/judcon-2013-full-control-and-transparency</id>
    <content type="html"><![CDATA[<p>Josh West and Andrew Dinn gave a well informed talk on various code and
runtime inspection tools in the JBoss toolbox.  First up was
<a href="https://www.jboss.org/tattletale">JBoss Tattletale</a>, used to inspect and
capture metadata for applications.  Tattletale creates an inventory of
all the libraries in and application and allows you to easily find which
jar is containing a class you have reason to be concerned with.  Ask anyone
who has tried to use the various online &ldquo;jar finder&rdquo; kinds of services and
they will tell you that being able to see a specific, context relevant
listing is a secret sauce.  Personally, I&rsquo;m glad to find a tool that allows
me to finally throw away my quick and dirty scripts combining find, unzip and
grep to look for class locations.  Tattletale creates and easy to search and
read report in HTML and can be invoked within your continous integration
build tool of choice so that reports are always at the ready.</p>

<p><a href="https://windup.jboss.org/index.html">JBoss Windup</a>, a tool I am personally
excited about to assist with inventory of applications deployed to Oracle or
IBM application servers produces output from Tattletale as one of its
artifacts.</p>

<h2>Decompiling</h2>

<p>Next, we looked briefly at decompilation options for code that you either
didn&rsquo;t write or don&rsquo;t own or (Heaven forbid) don&rsquo;t have the source code for
any longer.  <a href="http://java.decompiler.free.fr/?q=jdgui">JD-GUI</a> seems to be
the best of the readily available options, but itself is not open source. Of
course, that leaves you to wonder the obvious question of when you might need
to decompile the decompiler.  There is an open source JAVA decompiler in the
works, called <a href="https://github.com/bradsdavis/candle-decompiler">Candle</a> by
Brad Davis, the author of Cake, the tool behind Windup.</p>

<h2>Bytecode Magic</h2>

<p>This section could just as easily have been called <em>Black Magic</em>.  Bytecode
injection is a technique that not many leverage because it is simultaneously
powerful and tough to get right if you don&rsquo;t know exactly what you are doing.</p>

<p><a href="http://www.jboss.org/byteman">Byteman</a> gives you the capability to inject
code at <em>RUNTIME</em> within just about any bit of code you have running, whether
you wrote it or not.  In a fantastic bit of functionality, this capability is
delivered as a <em>rule</em> you can define along with the code you want to be
injected and executed at the point defined by the rule.  You get local access
to variables and methods (if you know the names) so you can do detail logging
or property modification.  As a bonus, Byteman works at a lower level than
reflection, so you needn&rsquo;t worry about the public vs private nature of
class members.  While the obvious use is to inject logging and debugging
statements to better observe a problem, Byteman can also be used to assert
tests or conditions which are difficult (if not impossible) to reproduce in
a development environment.  For example, if the production environment has
a poorly handled runtime exception from time to time which cannot be
reproduced in any other environment, Byteman could be used on a developer&rsquo;s
workstation to inject the runtime exception at the exact point it is being
thrown in the live environment and develop proper handling and application
recovery.</p>

<p>Continuing to wax enthusiastic about Byteman, it has the ability to run as
an Agent on the JVM when passed as a command line parameter on startup,
allowing it to listen on a remote interface for live inspection of the
execution environment.  Rules submitted this way can be typechecked, so you
can be fairly certain that they will not cause a runtime error when
encountered.  However, the important thing to note is that if you are using
a very specific type, such as a particular kind of exception, be sure to
use the fully qualified name so as to avoid unexpected results if the
application has defined a local type with the same name that is in scope
of the executing rule, or in case the type is not already imported by the
parent class.</p>

<h2>Closing Thoughts</h2>

<p>With runtime modification and injection, Java developers can get a taste of
4GL without leaving their cozy strongly typed 3rd generation language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CamelOne 2013: Making Apache MQ Scale]]></title>
    <link href="http://mattdugan.github.io/blog/2013/06/18/camelone-2013-making-apache-mq-scale/"/>
    <updated>2013-06-18T08:43:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/06/18/camelone-2013-making-apache-mq-scale</id>
    <content type="html"><![CDATA[<p><a href="http://hiramchirino.com/blog">Hiram Chirino</a> is one of the authors of
Apache MQ, so this should be good.</p>

<p>Apache MQ is designed for Machine to Machine, push-style messaging and
enables vertical scaling through high performance as well as
horizontal scaling through clustering and partitioning.  Hiram gave
a number of scaling tips for Apache MQ, which should mostly apply to
<a href="https://www.redhat.com/products/jbossenterprisemiddleware/fuse/">JBoss Fuse</a>
since Apache MQ is embedded.</p>

<h2>Vertical Scaling</h2>

<p>To start, vertical scaling, or allowing a single Apache MQ broker to
serve more traffic than before, can be improved with a few parameters:</p>

<ul>
<li>Set the configuration for using a dedicated task runner to false.</li>
<li>Set the destination policy setting for optimizing dispatch to true.</li>
<li>Use the NIO transport on the broker</li>
<li>Reduce the thread size on the JVM via the Xss option</li>
</ul>


<p>If using version 5.6 of Apache MQ, then non-blocking callbacks for
ACK-ing receipt of JMS messages are available which can improve
performance by incurring fewer thread waits.</p>

<p>If using version 5.8, a new backing store is available, called
<a href="https://github.com/fusesource/fuse-extra/tree/master/fusemq-leveldb">Level DB</a>
instead of <a href="https://activemq.apache.org/kahadb.html">Kaha DB</a> which
offers higher performance in nearly all cases.</p>

<h2>Horizontal Scaling</h2>

<p>Scaling <em>out</em> is usally a little more tricky than scaling <em>up</em>.  In
Apache MQ, there are two primary methods for scaling out
horizontally in your messaging architecture:</p>

<ol>
<li>Use client side partitioning by having multiple brokers, each
for a set of clients.</li>
<li>Link brokers together in a cluster configuration.</li>
</ol>


<p>The second method is the out of box &ldquo;easy button&rdquo;, but it is
important to note that it does NOT make Apache MQ <em>faster</em>.  Instead,
in some cases it is <em>slower</em> because it may add a network hop
between brokers to reach a particular connected client path.</p>

<p>The first method is more difficult to configure and maintain as
clients scale out, so it is best used where the messaging topology
matches with the broker partitioning scheme. This occurs when clients
are naturally separated by geography or business purpose and
producers <em>know</em> which client group should receive a particular
message and can select the broker accordingly.</p>

<h2>High Availability</h2>

<p>Even with Horizontal Scaling practices, it is still possible to lose a
broker and, particularly when using partioning, the associated set of
clients.  This is where a High Availability configuration comes into
play &ndash; to allow clients to continue receiving messages when their
primary broker fails.</p>

<p>HA configurations often use a failover URI type, written as
<code>failover://(address1,address2,...)</code> but high availability can also
be acheived by clustering at the database level (which is still a
single point of failure, only now at the DB instead of the message
broker).  Alternately shared filesystems can be used and, in the case
of Apache MQ 5.9, a replicated Level DB using Zookeeper for automatic
leader election.</p>

<p>The <a href="https://zookeeper.apache.org/">Zookeeper</a> case is an interesting
one, as it is also the officially supported tool embedded within
<a href="http://fusesource.com/products/fuse-fabric/">Fuse Fabric</a> as the
service registry.  When a fabric URI is used, the client can dynamically
discover and resolve slave instances of brokers from the directory.</p>

<p>It is important to consider the system load when using Zookeeper, as
Zookeeper does not respond well in cases of CPU contention and this
can impact leader election.  Keeping Zookeeper hosted separately from
the Apache MQ broker helps with this, and you need at least 3 Zookeeper
instances to achieve High Availability through Zookeeper, and at least
5 to have high reliability.</p>

<h2>Demo Time</h2>

<p>Hiram made use of <a href="http://tmux.sourceforge.net/">Tmux</a> to automatically
echo his commands across multiple terminals, live in front of the
audience.  This speeds up the demo quite a bit, looks awesome, and
lends credibility to him as a presenter for using a cool tool.</p>

<p>The demo went well, showing brokers going down and the clients
recovering without losing messages.</p>

<h2>Closing Thoughts</h2>

<p>A lot of features are new in the 5.9 version of Apache MQ, but won&rsquo;t
make it into RedHat JBoss Fuse until early next year.<br/>
RedHat JBoss Fuse sees Apache MQ as upstream code and takes some time
to certify it for enterprise level support.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CamelOne 2013: Drools with Apache Camel.. Rules]]></title>
    <link href="http://mattdugan.github.io/blog/2013/06/17/camelone-2013-drools-with-apache-camel-dot-rules/"/>
    <updated>2013-06-17T14:32:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/06/17/camelone-2013-drools-with-apache-camel-dot-rules</id>
    <content type="html"><![CDATA[<p>Ah, the end of day Keynote, time to sit back and relax and
enjoy some light presentation that doesn&rsquo;t require any
brain power at all.</p>

<p>&hellip; But it wasn&rsquo;t meant to be.  Mark Proctor was the presenter
and when they guy talking to you looks like he can juggle
a couple of Voltswagens, you had better listen.</p>

<h2>jBPM, Drools, BRMS, what?</h2>

<p>Coming from a background heavy in BPM, the confusion is
natural and isn&rsquo;t exclusive to the decision maker, the
implementer, or even the business user.  Each technology
has certain merits and this session helped to clarify
<a href="https://www.jboss.org/drools/">Drools</a>. Drools is not so
much a &ldquo;Business Rule&rdquo; engine as it is a <em>Hybrid Reasoning
Engine</em> supporting filters, logic, and chains.  Drools
includes features for CEP (Complex Event Processing),
Decision Tables for processing high numbers of rules and
<em>Time Windowing</em> &ndash; a powerful feature allowing you to
write logic for events that occur &ldquo;over the last 5 minutes&rdquo;
or other relative time periods.</p>

<p>Next, we looked at BRMS, which packages Drools and jBPM
together along with a rule repository to achieve a very
useful integration pattern.  Often, business users struggle
with expressing a complete process (as opposed to merely
a high-level process) in BPMN.  Eventually, the implementation
starts to look like code, graphical or not.  Rules, on
the other hand, <em>are</em> code but do not easily work upward
to describe an overall business process.  Putting the
two together is a peanut-butter-on-chocolate approach
designed to achieve common code patterns using Rule
logic while expressing the transitions between rule chains
and processes using BPMN.  This concept works surprisingly
well and I have to commend the RedHat BRMS team for
thinking outside of the single-purpose tool package we see
from other vendors.</p>

<p>The upcoming release of BRMS embedding Drools 6 gains
the ability of JBoss Truth Management to enable handling
of contraditions in the rule chain &ndash; for example a
discount rule of 10% and a temporary discount of 20% are
in conflict unless the contradiction can be managed to say
that the 20% rate is valid over a particular time window
and otherwise default to the 10% rule.  MultiCore processing
additions in Drools 6 should provide a significant speedup
in the next release of BRMS as well.</p>

<p>The Drools 6 UI gets a much needed refresh to fix some
old nuances and adds resizable panels for getting work
done within the browser viewport.  The new UI is brought
together with Errai <em>(see earlier post)</em>.  Rule storage
now has a GIT backend so rule authors can take advantage
of the GIT workflow for publishing rules.  Finally, work
has been performed to create a high availability scenario
for the rules engine and everything is built together
with maven.  Drools 6 introduces a new principal object
extension point, KIE, for &ldquo;Knowledge is Everything&rdquo;.</p>

<p>Mark closed out the presentation with a brief note on
applying rules to situations you may not have thought of
as a convenient answer.  Watch Mark write Pong, implemented
in Drools.</p>

<p><a href="https://www.youtube.com/watch?v=Omj4PR3v-nI">https://www.youtube.com/watch?v=Omj4PR3v-nI</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JUDCon 2013: Rich Web Applications with JBoss Errai]]></title>
    <link href="http://mattdugan.github.io/blog/2013/06/17/rich-web-applications-with-jboss-errai/"/>
    <updated>2013-06-17T13:19:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/06/17/rich-web-applications-with-jboss-errai</id>
    <content type="html"><![CDATA[<p>I managed to check into my hotel and change shirts and still make the
next session.  I had planned on attending a totally different
session but the JUDCon session on Errai was too tempting to miss.</p>

<h2>Errai</h2>

<p><a href="https://www.jboss.org/errai">JBoss Errai</a> is a full stack UI
development framework that builds on <a href="https://code.google.com/p/google-web-toolkit/">Google GWT</a>
to offer a single programming model for both the frontend and
application tier of a web application.  One of the goals of
the framework is to be entirely declarative and thereby avoid
writing boilerplate wherever possible.  Errai uses JEE6 APIs
and makes special use of the CDI APIs for injecting models
and services and attempts to have unobtrusive marshalling.</p>

<p>The structure of a JBoss Errai application is familiar looking
and pretty well organized:</p>

<pre><code>project_root/
  src/main/
    java/
      .gwt.xml
      client/** (Java code to generate the client)
      shared/** (Java code common between client and server)
      server/** (Java code specific to the server side)
    webapp/
      **.html
      WEB-INF/web.xml
    resources/
      *_App.properties
</code></pre>

<p>An interesting feature is the notion of a single-model for
transferring of structured objects between the server and
browser client.  Errai uses an annotation to mark this kind
of object as <code>@Portable</code>.  Doing so, data flow can be
bi-directional between the server and the client, as data
changes on the server can be automatically replicated to the
client via the available WebSockets connection and likewise
for data changes made by the client when reflected back to
the server.  Errai also supports polling, long polling and
messaging.  Naturally, JAX-RS functionality is available
for writing more specific operational services.  RPC like
functionality is enabled since writing in the single Java
language domain means that business methods can be invoked
directly by Java code in the <code>src/main/java/client/</code> tree,
and Errai sorts it out at code-generation time.</p>

<p><em>(Aside: I just noticed that putting on my glasses is like
going from DVD to BluRay. So <em>that&rsquo;s</em> what it says on the
bottom of the slide!)</em></p>

<p>The power of the single-language-domain model is evident
(inspired by other single-language models, like Meteor JS)
as suddenly the client can use things like JPA in the
<em>browser</em>.  Now of course, this is not &ldquo;true&rdquo; JPA but
feels like JPA when you are writing the code in a language
like Java, but actually dealing with browser features like
the local-storage APIs.</p>

<p>Errai uses templates to define the markup to render UI parts
of an application or objects.  Using the <code>data-</code> prefix
for attributes, which are valid to the HTML5 specification,
Errai provides the metadata required for the 2-way data
binding.  Note that this binding can only be performed on
objects marked <code>@Portable</code> as non-<code>@Portable</code> objects are
local to the origin language and will not have a JavaScript
translation. Type inference is performed when data is
migrated back and forth, for example between input and
textarea with the String type, or with Integers and errors
are reported where types cannot be translated.</p>

<p>In keeping with the overall move to WebSockets where the
browser is a first class citizen, Errai exposes notifications
corresponding to events which occur in the data model
(where <code>@Portable</code> is applied).  Naturally both the client
and server must support WebSockets, such as with a modern
web browser and an application server such as Tomcat 7.0.28
or WildFly.  Beyond just data model events, Errai can
receive and respond to <em>DOM Events</em>.  This is a game
changing feature for Java web application development as the
server can be a first class participant in the handling of
specific DOM events and take part in managing the viewport
of the client.</p>

<p>Security features in the framework are in progress, but
for now the <a href="https://www.jboss.org/picketlink">JBoss PicketLink</a>
looks like a good option.</p>

<h2>Closing Thoughts</h2>

<p>I have to say, I came in expecting to heckle but came out
very pleasantly surprised.  I&rsquo;ll be using Errai for the next
Java based UI that I put together.</p>

<p>Check out <a href="https://github.com/errai/errai">Errai on GitHub</a> and dive in.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JUDCon 2013: JBoss Data Grid and WebSockets]]></title>
    <link href="http://mattdugan.github.io/blog/2013/06/17/judcon-2013-jboss-grid-and-websockets/"/>
    <updated>2013-06-17T09:16:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/06/17/judcon-2013-jboss-grid-and-websockets</id>
    <content type="html"><![CDATA[<h1>Delivering Real Time Push at Scale</h1>

<p><em>(Keeping an eye on the <a href="https://developer.apple.com/wwdc/">WWDC</a>
announcements)</em></p>

<p>It&rsquo;s good to see a Linux OS doing the presenting, though it
looks like Ubuntu, not RHEL?  Oh I see, hah! it&rsquo;s just a virtual
machine.</p>

<p><a href="http://blog.c2b2.co.uk">Mark Addy</a> started the presentation by
covering why we need to look at websockets and data grid solutions
in general.  After all, if what we have today must already work,
why do anything different?  The good news is, we can improve quite
a bit.  Existing mechanisms for delivering (or simulating) real time
data updates between a server and browser with HTTP are inherently
limited.  HTTP is a request-reply protocol, which means it is
a half-duplex connection, like using a walkie-talkie pair for
each connection open between the client and server.  Worse, only
the client can initiate the connection.  In our use case here,
the client is the browser.  Comet Cursor techniques, like polling
or even long-polling doesn&rsquo;t cut it for high concurrency or
high frequency updates.  Streaming over HTTP 1.1 connections is
not (as) memory efficient.</p>

<h2>Enter WebSockets</h2>

<p>WebSockets are available in HTML5 compliant browsers, described
by <a href="https://www.rfc-editor.org/rfc/rfc6455.txt">RFC 6455</a> and in
JEE7 described by <a href="http://jcp.org/aboutJava/communityprocess/final/jsr356/index.html">JSR 356</a>.
WebSockets provide a protocol upgrade path from traditional
HTTP, support full duplex communication (bidirectional
and simultaneous), support path parameters (<em>can you say:
RESTful WebSockets?</em>) and use only 2 bytes overhead per frame.</p>

<h2>JBoss Data Grid</h2>

<p><a href="https://www.redhat.com/products/jbossenterprisemiddleware/data-grid/">JBoss Data Grid</a>
is essentially a caching framework which includes data replication
and (re) distribution functionality.  This means that the sum of the
data included in a JBoss Data Grid cache is equivalent to the number
of elements in the cache multiplied by the number of nodes and divided
by the number of copies of the data between nodes.  Redundancy is
automatic with even data distribution.</p>

<p>For applications, a great feature of Data Grid is that as a
developer, you need not remember which node received data to retrieve
it back again later.  The data grid will note the location of each
entry and automatically retrieve it from any other node as necessary
when requested by an application.  Another is the support for <em>Cache
Events</em>.  Listening to cache events allows and application to take
advice from the cache when elements are changed or written.  For
example, in a dashboard if the source data aggregate changes in
response to a recurring map-reduce job, data could be made available
to dashboard listeners by issuing a push or pull request after
receiving an event notification that the data had changed in the cache.</p>

<p>Currently, JBoss Data Grid can only be used in an embedded mode, as
a java library in an application.  Soon multiple modes will be supported,
such as a client-server mode.  If you are using the new 8.0.0
<a href="http://wildfly.org">WildFly</a> application server then you can use
library mode with JBoss Data Grid right away.</p>

<h2>Optimizing Events</h2>

<p>Since multiple copies of data can exist in a distributed cache,
multiple events occur whenever data is updated as copies are refreshed.
An application most likely does not want to receive the additional
events and almost surely does not want to propogate a data refresh to
a WebSocket client connection if the data has not actually changed from
the first event received.  To resolve this, JBoss application servers
including HornetQ can enable the <em>de-duplication</em> feature on a JMS
Topic, resulting in an automatic purging of the duplicate cache
events as they are published to the topic.</p>

<pre><code>WebSocket Clients ............   *
          /|\
           |   (WebSocket Protocol)
          \|/
Application Message Driven Beans (@ServerEndpoint)
          /|\
           |   (JMS via Subscription)
           |
HornetQ Topic Publisher
  /|\     /|\    /|\
   |       |      |   (Data Grid Cache Events)
   |       |      |
JBoss Data Grid Layer
   |    |    |    |
  |X| .......... |X|  (Data Grid Nodes)
</code></pre>

<p><em>(WWDC Update: New MacBook Air with Haswell and a new MacPro!)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CamelOne 2013: Camel Cookbook]]></title>
    <link href="http://mattdugan.github.io/blog/2013/06/17/camelone-2013-camel-cookbook/"/>
    <updated>2013-06-17T09:11:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/06/17/camelone-2013-camel-cookbook</id>
    <content type="html"><![CDATA[<p>Unfortunately by the time my flight landed and I took the bus and
two subways to the Hynes Convention Center in Boston, MA, got
registered, issued a badge and had my bearings &mdash; the Camel
Cookbook session was full and overflowing. Scott Cranton must
be in top form.</p>

<p>Oh well, great time for a coffee and a chance to familiarize
myself with the conference session layout before camping out
in front of the upcoming JUDCon session on JBoss Grid and
WebSockets.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Job]]></title>
    <link href="http://mattdugan.github.io/blog/2013/06/11/new-job-slash/"/>
    <updated>2013-06-11T12:55:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/06/11/new-job-slash</id>
    <content type="html"><![CDATA[<h1>Leaving AT&amp;T</h1>

<p>About one month ago today, I realized that the time has come to move on.
While I am leaving some people I have grown to admire, respect, and
consider as my friends, new opportunities present themselves each day
and I must choose the path which aligns best with my career drivers:</p>

<ul>
<li>Pursuit of new challenges</li>
<li>Collaboration and Community</li>
<li>Open Source Innovation</li>
<li>Results</li>
</ul>


<p>Today, I have returned from the <a href="http://www.redhat.com/summit">2013 RedHat Summit</a>
and begin my first day in my office at my new job, as a Middleware
Solutions Architect for <a href="http://www.shadow-soft.com">Shadow-Soft</a>.</p>

<p>(More posts to come about the RedHat Summit)</p>

<p>In my new role, I&rsquo;m finally on the revenue side of a business rather
than an (IT) cost center.  I&rsquo;ll be doing some pre-sales, sales
engineering, and lots of architecture, presentations, training, and
concept development.</p>

<p>Things are looking bright for 2013 and the future.</p>
]]></content>
  </entry>
  
</feed>
