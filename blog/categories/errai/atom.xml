<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Errai | Matt Dugan]]></title>
  <link href="http://mattdugan.github.io/blog/categories/errai/atom.xml" rel="self"/>
  <link href="http://mattdugan.github.io/"/>
  <updated>2013-07-11T17:26:36-04:00</updated>
  <id>http://mattdugan.github.io/</id>
  <author>
    <name><![CDATA[Matt Dugan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JUDCon 2013: Building HTML5 Applications]]></title>
    <link href="http://mattdugan.github.io/blog/2013/06/25/judcon-2013-building-html5-applications/"/>
    <updated>2013-06-25T15:20:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/06/25/judcon-2013-building-html5-applications</id>
    <content type="html"><![CDATA[<p><a href="http://www.jboss.org">JBoss</a> has been doing a lot of work (and a lot of
writing) about their quick starts to application development on the JBoss
stack.  This is a <em>good thing</em> as..</p>

<ol>
<li>All the code is open source</li>
<li>JBoss has a huge number of projects and it can be difficult to make
sense of them all without good examples.</li>
</ol>


<p>Pete Muir (who could walk into any high school undetected) is
a superb presenter and is an active participant in the JBoss quickstart
projects.</p>

<p>There are nearly 100 <a href="https://www.jboss.org/jdf/quickstarts/get-started/">JBoss Quickstarts</a>
to assist developers and architects alike with doing their own work or just
getting familiar with the suite of JBoss projects available for use.  Most, if
not all, are available from GitHub and can be initalized using a maven
command or two.  Some quickstart projects are implemented more than once, with
variation between the implementation technology.  This is another great
technique for learning just what difference does using
<a href="http://angularjs.org/">Angular JS</a> vs <a href="https://www.jboss.org/errai">JBoss Errai</a>
or <a href="https://www.jboss.org/richfaces">RichFaces JSF</a> make for an application
(for example).</p>

<h2>TicketMonster</h2>

<p>The focus of today&rsquo;s presentation (and others to follow) was the
<a href="https://www.jboss.org/jdf/examples/ticket-monster/tutorial/WhatIsTicketMonster/">Ticket Monster</a>
example application.  It made use of several technologies, including the
new JEE-6 specification for CDI to inject implementations of common application
functionality into the business classes, <a href="https://www.redhat.com/products/jbossenterprisemiddleware/data-grid/">JBoss DataGrid</a>
as an application object cache and a choice of view layers.  The application
is written in such a way as to have a different UI for both desktop and
mobile view clients while maintaining a consistent service API on the JBoss
application server.</p>

<p>As a shortcut for developing management UI capability for the various domain
objects in Ticket Monster, <a href="http://forge.jboss.org/">JBoss Forge</a> was used
to generate the administration pages as scaffolds on top of the entity objects
for the Admin function.  This is a feature that has been around in Ruby and
Python domains for quite some time, and it is very good to see the scaffold
development utility appear in the Java space.</p>

<p><a href="https://www.jboss.org/errai">JBoss Errai</a> is used to provide a live data
binding between the UI and the server side of the application, which, via
Errai, automatically upgrades the connection to a WebSockets interleaved
stream when supported by both the browser and server.  Using CDI and events,
the communication between the client and server is highly interactive.</p>

<h2>Closing Thoughts</h2>

<p>It is a point of personal satisfaction to see so much work being done to
help developers learn and do creative work, especially so since all of
the materials produced for the tutorials (and the application server itself)
is open source and available to all.  Kudos to the JBoss team and RedHat for
not looking for a &ldquo;line&rdquo; between what is open and what is closed, but for
being all open, all the time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JUDCon 2013: Rich Web Applications with JBoss Errai]]></title>
    <link href="http://mattdugan.github.io/blog/2013/06/17/rich-web-applications-with-jboss-errai/"/>
    <updated>2013-06-17T13:19:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/06/17/rich-web-applications-with-jboss-errai</id>
    <content type="html"><![CDATA[<p>I managed to check into my hotel and change shirts and still make the
next session.  I had planned on attending a totally different
session but the JUDCon session on Errai was too tempting to miss.</p>

<h2>Errai</h2>

<p><a href="https://www.jboss.org/errai">JBoss Errai</a> is a full stack UI
development framework that builds on <a href="https://code.google.com/p/google-web-toolkit/">Google GWT</a>
to offer a single programming model for both the frontend and
application tier of a web application.  One of the goals of
the framework is to be entirely declarative and thereby avoid
writing boilerplate wherever possible.  Errai uses JEE6 APIs
and makes special use of the CDI APIs for injecting models
and services and attempts to have unobtrusive marshalling.</p>

<p>The structure of a JBoss Errai application is familiar looking
and pretty well organized:</p>

<pre><code>project_root/
  src/main/
    java/
      .gwt.xml
      client/** (Java code to generate the client)
      shared/** (Java code common between client and server)
      server/** (Java code specific to the server side)
    webapp/
      **.html
      WEB-INF/web.xml
    resources/
      *_App.properties
</code></pre>

<p>An interesting feature is the notion of a single-model for
transferring of structured objects between the server and
browser client.  Errai uses an annotation to mark this kind
of object as <code>@Portable</code>.  Doing so, data flow can be
bi-directional between the server and the client, as data
changes on the server can be automatically replicated to the
client via the available WebSockets connection and likewise
for data changes made by the client when reflected back to
the server.  Errai also supports polling, long polling and
messaging.  Naturally, JAX-RS functionality is available
for writing more specific operational services.  RPC like
functionality is enabled since writing in the single Java
language domain means that business methods can be invoked
directly by Java code in the <code>src/main/java/client/</code> tree,
and Errai sorts it out at code-generation time.</p>

<p><em>(Aside: I just noticed that putting on my glasses is like
going from DVD to BluRay. So <em>that&rsquo;s</em> what it says on the
bottom of the slide!)</em></p>

<p>The power of the single-language-domain model is evident
(inspired by other single-language models, like Meteor JS)
as suddenly the client can use things like JPA in the
<em>browser</em>.  Now of course, this is not &ldquo;true&rdquo; JPA but
feels like JPA when you are writing the code in a language
like Java, but actually dealing with browser features like
the local-storage APIs.</p>

<p>Errai uses templates to define the markup to render UI parts
of an application or objects.  Using the <code>data-</code> prefix
for attributes, which are valid to the HTML5 specification,
Errai provides the metadata required for the 2-way data
binding.  Note that this binding can only be performed on
objects marked <code>@Portable</code> as non-<code>@Portable</code> objects are
local to the origin language and will not have a JavaScript
translation. Type inference is performed when data is
migrated back and forth, for example between input and
textarea with the String type, or with Integers and errors
are reported where types cannot be translated.</p>

<p>In keeping with the overall move to WebSockets where the
browser is a first class citizen, Errai exposes notifications
corresponding to events which occur in the data model
(where <code>@Portable</code> is applied).  Naturally both the client
and server must support WebSockets, such as with a modern
web browser and an application server such as Tomcat 7.0.28
or WildFly.  Beyond just data model events, Errai can
receive and respond to <em>DOM Events</em>.  This is a game
changing feature for Java web application development as the
server can be a first class participant in the handling of
specific DOM events and take part in managing the viewport
of the client.</p>

<p>Security features in the framework are in progress, but
for now the <a href="https://www.jboss.org/picketlink">JBoss PicketLink</a>
looks like a good option.</p>

<h2>Closing Thoughts</h2>

<p>I have to say, I came in expecting to heckle but came out
very pleasantly surprised.  I&rsquo;ll be using Errai for the next
Java based UI that I put together.</p>

<p>Check out <a href="https://github.com/errai/errai">Errai on GitHub</a> and dive in.</p>
]]></content>
  </entry>
  
</feed>
