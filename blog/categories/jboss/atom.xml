<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JBoss | Matt Dugan]]></title>
  <link href="http://mattdugan.github.io/blog/categories/jboss/atom.xml" rel="self"/>
  <link href="http://mattdugan.github.io/"/>
  <updated>2013-07-11T17:26:36-04:00</updated>
  <id>http://mattdugan.github.io/</id>
  <author>
    <name><![CDATA[Matt Dugan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Red Hat Summit 2013: The JBoss Way]]></title>
    <link href="http://mattdugan.github.io/blog/2013/07/11/red-hat-summit-2013-the-jboss-way/"/>
    <updated>2013-07-11T16:05:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/07/11/red-hat-summit-2013-the-jboss-way</id>
    <content type="html"><![CDATA[<p>Pete Muir was the presenter again, tailing off from his prior session on
<em>Building HTML5 Applications</em>.  This session should have some code examples
and more insights.</p>

<p>Diving into the code for the quickstarts, Pete makes a plug for
<a href="http://www.angularjs.org/">AngularJS</a> and is clearly a big fan.  The
<em>difference</em> with Angular JS is that it feels like using a tag library
language rather than applying text base templates for substitution.  The
negative point is that since AngularJS does not use <code>data-</code> attribute
prefixes, each <code>ng-</code> attribute gets the red underline because it isn&rsquo;t
following the HTML5 doctype.  Shame.</p>

<p>Still, being able to see the same or similar quick starts represented with
variations on the implementation choices is the next best thing to diving
into a framework and trying to make something useful yourself.</p>

<p>The <a href="https://www.jboss.org/jdf/quickstarts/get-started/">Quickstarts</a>
source code is always available on <a href="https://github.com/jboss-jdf/%0Ajboss-as-quickstart">GitHub</a> and the individual pages for the quick start guides
have comments enabled which the authors tend to respond to.  This
communication is key since there are nearly 100 quick starts right now to
absorb and make sense of.</p>

<p>Code examples are presented using <a href="https://devstudio.jboss.com/download/6.x.html">JBoss Developer Studio</a>, the enterprise version of the
JBoss IDE.  The examples are executing on <a href="http://www.redhat.com/products/jbossenterprisemiddleware/application-platform/">JBoss EAP 6</a>, the
enterprise version of Wildfly (JBoss Application Server &ndash; Community Edition).</p>

<p>The workflow of making code changes or developing a project that you want
to deploy to your configured server from within the developer studio is
simple: just drag and drop the application module onto the server
configuration and it will deploy in the console.</p>

<h2>JBoss Forge</h2>

<p>Now the fun starts.  <a href="http://forge.jboss.org/">JBoss Forge</a> is a command
line CLI which <em>interprets</em> commands to cause code to be generated in the
project.  As I said before, this rapid prototyping feature from other
dynamic language platforms is finally making its way into Java
development.  Using TAB completion, Pete is able to quickly generate
additional entity classes in the example project and wire them up with CDI.</p>

<p>What immediately comes to mind is using Forge with a template script that
accepts some parameters (or YAML) markup to substitute into the Forge
script.  This could be a powerful way to quickstart applications of a
particular character while leaving the important decisions up to the
developer, while still ensuring that the generated application code matches
up to local policies and code structure guidelines.</p>

<p>Finally, using the JBoss Developer Studio, Pete <em>publishes</em> his application
directly to his <a href="http://www.openshift.com">OpenShift</a> instance, showing how a
developer can create and deploy an application onto the &ldquo;cloud&rdquo; that is
more than just a simple static website, but a real JEE client server
application.  What a use case!</p>

<h2>Closing Thoughts</h2>

<p>The JDF roadmap for 2013 should add quickstarts for JBoss Fuse, Switch
Yard, JBPM and Drools.  Exciting times are ahead.  I wonder if having all
this quickstart collateral will cause the JBoss development team to slow
down the rate of change in the platform?  Naaah. :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JUDCon 2013: Building HTML5 Applications]]></title>
    <link href="http://mattdugan.github.io/blog/2013/06/25/judcon-2013-building-html5-applications/"/>
    <updated>2013-06-25T15:20:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/06/25/judcon-2013-building-html5-applications</id>
    <content type="html"><![CDATA[<p><a href="http://www.jboss.org">JBoss</a> has been doing a lot of work (and a lot of
writing) about their quick starts to application development on the JBoss
stack.  This is a <em>good thing</em> as..</p>

<ol>
<li>All the code is open source</li>
<li>JBoss has a huge number of projects and it can be difficult to make
sense of them all without good examples.</li>
</ol>


<p>Pete Muir (who could walk into any high school undetected) is
a superb presenter and is an active participant in the JBoss quickstart
projects.</p>

<p>There are nearly 100 <a href="https://www.jboss.org/jdf/quickstarts/get-started/">JBoss Quickstarts</a>
to assist developers and architects alike with doing their own work or just
getting familiar with the suite of JBoss projects available for use.  Most, if
not all, are available from GitHub and can be initalized using a maven
command or two.  Some quickstart projects are implemented more than once, with
variation between the implementation technology.  This is another great
technique for learning just what difference does using
<a href="http://angularjs.org/">Angular JS</a> vs <a href="https://www.jboss.org/errai">JBoss Errai</a>
or <a href="https://www.jboss.org/richfaces">RichFaces JSF</a> make for an application
(for example).</p>

<h2>TicketMonster</h2>

<p>The focus of today&rsquo;s presentation (and others to follow) was the
<a href="https://www.jboss.org/jdf/examples/ticket-monster/tutorial/WhatIsTicketMonster/">Ticket Monster</a>
example application.  It made use of several technologies, including the
new JEE-6 specification for CDI to inject implementations of common application
functionality into the business classes, <a href="https://www.redhat.com/products/jbossenterprisemiddleware/data-grid/">JBoss DataGrid</a>
as an application object cache and a choice of view layers.  The application
is written in such a way as to have a different UI for both desktop and
mobile view clients while maintaining a consistent service API on the JBoss
application server.</p>

<p>As a shortcut for developing management UI capability for the various domain
objects in Ticket Monster, <a href="http://forge.jboss.org/">JBoss Forge</a> was used
to generate the administration pages as scaffolds on top of the entity objects
for the Admin function.  This is a feature that has been around in Ruby and
Python domains for quite some time, and it is very good to see the scaffold
development utility appear in the Java space.</p>

<p><a href="https://www.jboss.org/errai">JBoss Errai</a> is used to provide a live data
binding between the UI and the server side of the application, which, via
Errai, automatically upgrades the connection to a WebSockets interleaved
stream when supported by both the browser and server.  Using CDI and events,
the communication between the client and server is highly interactive.</p>

<h2>Closing Thoughts</h2>

<p>It is a point of personal satisfaction to see so much work being done to
help developers learn and do creative work, especially so since all of
the materials produced for the tutorials (and the application server itself)
is open source and available to all.  Kudos to the JBoss team and RedHat for
not looking for a &ldquo;line&rdquo; between what is open and what is closed, but for
being all open, all the time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JUDCon 2013: Rich Web Applications with JBoss Errai]]></title>
    <link href="http://mattdugan.github.io/blog/2013/06/17/rich-web-applications-with-jboss-errai/"/>
    <updated>2013-06-17T13:19:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/06/17/rich-web-applications-with-jboss-errai</id>
    <content type="html"><![CDATA[<p>I managed to check into my hotel and change shirts and still make the
next session.  I had planned on attending a totally different
session but the JUDCon session on Errai was too tempting to miss.</p>

<h2>Errai</h2>

<p><a href="https://www.jboss.org/errai">JBoss Errai</a> is a full stack UI
development framework that builds on <a href="https://code.google.com/p/google-web-toolkit/">Google GWT</a>
to offer a single programming model for both the frontend and
application tier of a web application.  One of the goals of
the framework is to be entirely declarative and thereby avoid
writing boilerplate wherever possible.  Errai uses JEE6 APIs
and makes special use of the CDI APIs for injecting models
and services and attempts to have unobtrusive marshalling.</p>

<p>The structure of a JBoss Errai application is familiar looking
and pretty well organized:</p>

<pre><code>project_root/
  src/main/
    java/
      .gwt.xml
      client/** (Java code to generate the client)
      shared/** (Java code common between client and server)
      server/** (Java code specific to the server side)
    webapp/
      **.html
      WEB-INF/web.xml
    resources/
      *_App.properties
</code></pre>

<p>An interesting feature is the notion of a single-model for
transferring of structured objects between the server and
browser client.  Errai uses an annotation to mark this kind
of object as <code>@Portable</code>.  Doing so, data flow can be
bi-directional between the server and the client, as data
changes on the server can be automatically replicated to the
client via the available WebSockets connection and likewise
for data changes made by the client when reflected back to
the server.  Errai also supports polling, long polling and
messaging.  Naturally, JAX-RS functionality is available
for writing more specific operational services.  RPC like
functionality is enabled since writing in the single Java
language domain means that business methods can be invoked
directly by Java code in the <code>src/main/java/client/</code> tree,
and Errai sorts it out at code-generation time.</p>

<p><em>(Aside: I just noticed that putting on my glasses is like
going from DVD to BluRay. So <em>that&rsquo;s</em> what it says on the
bottom of the slide!)</em></p>

<p>The power of the single-language-domain model is evident
(inspired by other single-language models, like Meteor JS)
as suddenly the client can use things like JPA in the
<em>browser</em>.  Now of course, this is not &ldquo;true&rdquo; JPA but
feels like JPA when you are writing the code in a language
like Java, but actually dealing with browser features like
the local-storage APIs.</p>

<p>Errai uses templates to define the markup to render UI parts
of an application or objects.  Using the <code>data-</code> prefix
for attributes, which are valid to the HTML5 specification,
Errai provides the metadata required for the 2-way data
binding.  Note that this binding can only be performed on
objects marked <code>@Portable</code> as non-<code>@Portable</code> objects are
local to the origin language and will not have a JavaScript
translation. Type inference is performed when data is
migrated back and forth, for example between input and
textarea with the String type, or with Integers and errors
are reported where types cannot be translated.</p>

<p>In keeping with the overall move to WebSockets where the
browser is a first class citizen, Errai exposes notifications
corresponding to events which occur in the data model
(where <code>@Portable</code> is applied).  Naturally both the client
and server must support WebSockets, such as with a modern
web browser and an application server such as Tomcat 7.0.28
or WildFly.  Beyond just data model events, Errai can
receive and respond to <em>DOM Events</em>.  This is a game
changing feature for Java web application development as the
server can be a first class participant in the handling of
specific DOM events and take part in managing the viewport
of the client.</p>

<p>Security features in the framework are in progress, but
for now the <a href="https://www.jboss.org/picketlink">JBoss PicketLink</a>
looks like a good option.</p>

<h2>Closing Thoughts</h2>

<p>I have to say, I came in expecting to heckle but came out
very pleasantly surprised.  I&rsquo;ll be using Errai for the next
Java based UI that I put together.</p>

<p>Check out <a href="https://github.com/errai/errai">Errai on GitHub</a> and dive in.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JUDCon 2013: JBoss Data Grid and WebSockets]]></title>
    <link href="http://mattdugan.github.io/blog/2013/06/17/judcon-2013-jboss-grid-and-websockets/"/>
    <updated>2013-06-17T09:16:00-04:00</updated>
    <id>http://mattdugan.github.io/blog/2013/06/17/judcon-2013-jboss-grid-and-websockets</id>
    <content type="html"><![CDATA[<h1>Delivering Real Time Push at Scale</h1>

<p><em>(Keeping an eye on the <a href="https://developer.apple.com/wwdc/">WWDC</a>
announcements)</em></p>

<p>It&rsquo;s good to see a Linux OS doing the presenting, though it
looks like Ubuntu, not RHEL?  Oh I see, hah! it&rsquo;s just a virtual
machine.</p>

<p><a href="http://blog.c2b2.co.uk">Mark Addy</a> started the presentation by
covering why we need to look at websockets and data grid solutions
in general.  After all, if what we have today must already work,
why do anything different?  The good news is, we can improve quite
a bit.  Existing mechanisms for delivering (or simulating) real time
data updates between a server and browser with HTTP are inherently
limited.  HTTP is a request-reply protocol, which means it is
a half-duplex connection, like using a walkie-talkie pair for
each connection open between the client and server.  Worse, only
the client can initiate the connection.  In our use case here,
the client is the browser.  Comet Cursor techniques, like polling
or even long-polling doesn&rsquo;t cut it for high concurrency or
high frequency updates.  Streaming over HTTP 1.1 connections is
not (as) memory efficient.</p>

<h2>Enter WebSockets</h2>

<p>WebSockets are available in HTML5 compliant browsers, described
by <a href="https://www.rfc-editor.org/rfc/rfc6455.txt">RFC 6455</a> and in
JEE7 described by <a href="http://jcp.org/aboutJava/communityprocess/final/jsr356/index.html">JSR 356</a>.
WebSockets provide a protocol upgrade path from traditional
HTTP, support full duplex communication (bidirectional
and simultaneous), support path parameters (<em>can you say:
RESTful WebSockets?</em>) and use only 2 bytes overhead per frame.</p>

<h2>JBoss Data Grid</h2>

<p><a href="https://www.redhat.com/products/jbossenterprisemiddleware/data-grid/">JBoss Data Grid</a>
is essentially a caching framework which includes data replication
and (re) distribution functionality.  This means that the sum of the
data included in a JBoss Data Grid cache is equivalent to the number
of elements in the cache multiplied by the number of nodes and divided
by the number of copies of the data between nodes.  Redundancy is
automatic with even data distribution.</p>

<p>For applications, a great feature of Data Grid is that as a
developer, you need not remember which node received data to retrieve
it back again later.  The data grid will note the location of each
entry and automatically retrieve it from any other node as necessary
when requested by an application.  Another is the support for <em>Cache
Events</em>.  Listening to cache events allows and application to take
advice from the cache when elements are changed or written.  For
example, in a dashboard if the source data aggregate changes in
response to a recurring map-reduce job, data could be made available
to dashboard listeners by issuing a push or pull request after
receiving an event notification that the data had changed in the cache.</p>

<p>Currently, JBoss Data Grid can only be used in an embedded mode, as
a java library in an application.  Soon multiple modes will be supported,
such as a client-server mode.  If you are using the new 8.0.0
<a href="http://wildfly.org">WildFly</a> application server then you can use
library mode with JBoss Data Grid right away.</p>

<h2>Optimizing Events</h2>

<p>Since multiple copies of data can exist in a distributed cache,
multiple events occur whenever data is updated as copies are refreshed.
An application most likely does not want to receive the additional
events and almost surely does not want to propogate a data refresh to
a WebSocket client connection if the data has not actually changed from
the first event received.  To resolve this, JBoss application servers
including HornetQ can enable the <em>de-duplication</em> feature on a JMS
Topic, resulting in an automatic purging of the duplicate cache
events as they are published to the topic.</p>

<pre><code>WebSocket Clients ............   *
          /|\
           |   (WebSocket Protocol)
          \|/
Application Message Driven Beans (@ServerEndpoint)
          /|\
           |   (JMS via Subscription)
           |
HornetQ Topic Publisher
  /|\     /|\    /|\
   |       |      |   (Data Grid Cache Events)
   |       |      |
JBoss Data Grid Layer
   |    |    |    |
  |X| .......... |X|  (Data Grid Nodes)
</code></pre>

<p><em>(WWDC Update: New MacBook Air with Haswell and a new MacPro!)</em></p>
]]></content>
  </entry>
  
</feed>
